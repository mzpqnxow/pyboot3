#
# NOTE(AG): For reference:
#   https://pip.pypa.io/en/stable/user_guide/#requirements-files
#
# This includes mostly sane defaults and has a lot of commented out
# entries that are useful in specific environments. Examples include
# setting SOCKS and HTTP proxies as well as adding internal repositories
#
[global]
no-cache-dir = false
index-url = https://pypi.python.org/simple
trusted-host = pypi.python.org
respect-virtualenv = true
timeout = 60

# Wheel Caching
# -------------
# Please see the `wheel` section for why you might use this
# find-links = file://$HOME/.pip-wheel-cache

# Additional PyPi Repositories
# ----------------------------
# This is how it might look if you use Artifactory inside a company that
# uses internal DNS naming. WARN: You are trusting the HTTPS certificate
# that is presented by the PyPi repository by using trusted-host! You
# should add the CA bundle to your CA list. Unfortunately, this is not
# the same on every system. One way to do this is to add your internal
# CA bundle to packages/lib/python3.5/...../certifi/cacert.pem. You can
# read the pip documentation for more on this
#
# index-url = https://artifactory.corp.internal/api/pypi/python-local/simple
# extra-index-url = https://pypi.python.org/simple
# trusted-host = artifactory.corp.internal
#                pypi.python.org

# Proxy Settings
# --------------
# HTTP proxies are supported out of the box by pip, pysocks is
# explicitly packaged with pyboot3 so that SOCKS5 proxies can
# also work seamlessly
#
#   HTTP Proxy
#   ==========
#   proxy = http://127.0.0.1:3128
#
#   SOCKS5 Proxy
#   ============
#   proxy= socks5h://127.0.0.1:1080
#

[install]
# Automatic Dependencies on `pip install`
# ----------------------
#
# The following is recommended in the official pip documentation to avoid
# third-party packages from adding their dependencies to your venv without
# explicit consent. However, this makes it really annoying as you then need
# to track the individual sub-dependencies (which nest as well)
#
# If you're going to do this, perform a venv build once with this set to no,
# look it over to make sure it looks safe and sound, and then freeze your venv
# and place the list of packages (and ideally, version pins) to the
# requirements-projects.txt file. At that point, you can set it to yes and
# then rebuild your virtualenv
#
# Let's all be honest here though; you're not going to notice a malicious 3rd
# party dependency, especially if it's nested within another dependency; this
# is also annoying to deal with
#
# Note that this has nothing to do with constraints.txt, which is what is used
# to control the *versions* of dependencies that are installed when the
# `no-dependencies` setting is set to no. In other words, don't change this
# unless you know what you're doing and you're patient
no-dependencies = no
# no-dependencies = yes

[wheel]
# Caching Wheels After Build
# --------------------------
#
# tl;dr
#   If you're running a Linux x86_64 system, just skip past this
#
#   Do *not* use it, it is primarily for edge-cases. It saves binary wheels
#   that are built locally when only a source wheel was available. Aside from
#   being an uncommon edge-case, it is best handled using environment variables
#   in a shell init file. See below the lines beginning with `export ...` for
#   the lines to paste (verbatim) into your shell init if you think you fit the
#   requirements for usefulness in the next section, which is labelled clearly
#   as  `Conditions for Usefulness of Binary Wheel Caching`
#
#   
#
# Conditions for Usefulness of Binary Wheel Caching
# -------------------------------------------------
#  1. You are on a platform for which there is no binary wheel available
#  2. The package you are installing requires a native code build
#  3. The native code build takes a significant amount of time to complete
#
# ... the example here is Pandas and numpy on ppc64le Linux. In other words,
# *you* probably don't need this setting
# 
# Note that to make this effective, it is also necessary to place a corresponding
# entry in the global section, which makes this an even less desirable solution.
# To see the corresponding setting, please see the `Wheel Caching` notes above,
# in the global section. Both the
#
# A better solution for this is for this to remain commented out and to use your
# shell init file to set environment variables that control this behavior
#
# To accomplish this, place the following in your shell init file rather than
# uncommenting the `wheel-dir` directive below
#
# export STANDARD_CACHE_DIR="${XDG_CACHE_HOME:-${HOME}/.cache}/pip"
# export WHEELHOUSE="${STANDARD_CACHE_DIR}/wheelhouse"
# export PIP_FIND_LINKS="file://${WHEELHOUSE}"
# export PIP_WHEEL_DIR="${WHEELHOUSE}"
# 
# wheel-dir = $HOME/.pip-wheel-cache
#
# NOTE: To benefit from this, you must run either:
#         `pip wheel -r venv/requirements-project`
#         `pip wheel <package>`
#       The first will prepare wheels for future use for all of your requirements
#       The second will prepare a wheel for a single package 
#

[freeze]
timeout = 10